datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Quote {
  id              String @id @default(cuid())
  firstName       String
  lastName        String
  phoneNumber     String
  pickUpLocation  String
  dropOffLocation String
  timeFramePickUp DateTime
  healthCert      Boolean
  comments        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  openedAt  DateTime

  horses Horse[]
}

model Trip {
  id                   String @id @default(cuid())
  firstName            String
  lastName             String
  phoneNumber          String
  email                String
  pickUpDate           DateTime
  pickUpAddress        String
  pickUpContactName    String
  pickUpContactNumber  String
  dropOffAddress       String
  dropOffContactName   String
  dropOffContactNumber String
  bidAmount            Decimal
  healthCert           Boolean
  comments             String?

  horses Horse[]
}

model Horse {
  id      String @id @default(cuid())
  breed   String
  gender  String
  age     Int
  height  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quote   Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quoteId String
  trip    Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tripId  String
}

model Review {
  id String @id @default(cuid())
  firstName String
  lastName String
  email String
  publishable Boolean
  active Boolean
  comments String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photos Photo[]
}

model Photo {
  id     String @id @default(cuid())
  url    String
  active Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review   Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewId String
}
