datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  password  Password?
  passwordResetTokens PasswordResetToken[]
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Quote {
  id              String @id @default(cuid())
  firstName       String
  lastName        String
  phoneNumber     String
  pickUpLocation  String
  dropOffLocation String
  timeFramePickUp DateTime
  healthCert      Boolean
  comments        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  openedAt  DateTime
  deletedAt DateTime?

  horses Horse[]
}

model Trip {
  id                   String @id @default(cuid())
  firstName            String
  lastName             String
  phoneNumber          String
  email                String
  pickUpDate           DateTime
  pickUpAddress        String
  pickUpContactName    String
  pickUpContactNumber  String
  dropOffAddress       String
  dropOffContactName   String
  dropOffContactNumber String
  bidAmount            Decimal
  healthCert           Boolean
  comments             String?

  horses Horse[]
}

model Horse {
  id        String @id @default(cuid())
  name      String
  breed     String
  gender    String
  age       Int
  height    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quoteId String
  quote   Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tripId  String?
  trip    Trip?    @relation(fields: [tripId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
  id          String @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  publishable Boolean
  active      Boolean
  comments    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  photos Photo[]
}

model Photo {
  id        String @id @default(cuid())
  url       String
  active    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviewId String
  review   Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}